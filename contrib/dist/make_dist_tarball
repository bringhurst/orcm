#!/bin/sh
#
# Copyright (c) 2004-2006 The Trustees of Indiana University and Indiana
#                         University Research and Technology
#                         Corporation.  All rights reserved.
# Copyright (c) 2004-2005 The University of Tennessee and The University
#                         of Tennessee Research Foundation.  All rights
#                         reserved.
# Copyright (c) 2004-2005 High Performance Computing Center Stuttgart, 
#                         University of Stuttgart.  All rights reserved.
# Copyright (c) 2004-2005 The Regents of the University of California.
#                         All rights reserved.
# Copyright (c) 2008-2009 Cisco Systems, Inc.  All rights reserved.
# $COPYRIGHT$
# 
# Additional copyrights may follow
# 
# $HEADER$
#

#
# Version of auto tools that we want
#

M4_TARGET_VERSION=1.4.13
AM_TARGET_VERSION=1.11
AC_TARGET_VERSION=2.65
LT_TARGET_VERSION=2.2.6b

#
# Check command line flags
#

# Default to requiring *exact* versions if we're making distribution
# tarballs; but higher-than-expected versions are ok for
# non-distribution tarballs.
dist_target=distcheck
if test "`basename $0`" = "make_tarball"; then
    dist_target=dist
    highok=1
else
    highok=0
fi

greekonly=0
withorte=" "
var=$1
while test "${var}" != ""; do
    if [ "${var}" = "--greekonly" ]; then
        greekonly=1
    elif [ "${var}" = "-greekonly" ]; then
        greekonly=1
    elif [ "${var}" = "--highok" ]; then
        highok=1
    elif [ "${var}" = "-highok" ]; then
        highok=1
    elif [ "${var:0:11}" = "--with-orte" ]; then
        withorte="${var}"
    elif [ "${var:0:10}" = "-with-orte" ]; then
        withorte="${var}"
    fi
    shift 1
    var=$1
done

if [ "${withorte}" = " " ]; then
    echo "Must supply --with-orte=<path-to-orte-installation> - Aborting"
    exit 1
fi

#
# First things first -- check that the auto versions that we have are
# the ones that we want.
#

check_gnu_version() {
    prog="$1"
    target="$2"

    ver="`$prog --version | head -n 1 | sed -e's/([^)]*)//g' -e's/[^0-9 .][^ ]* / /g' -e's/ //g'`"

    ver_major=`echo $ver | cut -d. -f1`
    ver_minor=`echo $ver | cut -d. -f2`
    ver_release=`echo $ver | cut -d. -f3`
    if test "$ver_release" = ""; then
        ver_release=0
    fi

    target_major=`echo $target | cut -d. -f1`
    target_minor=`echo $target | cut -d. -f2`
    target_release=`echo $target | cut -d. -f3`
    if test "$target_release" = ""; then
        target_release=0
    fi

    # Gah -- Libtool released version 2.2.6b, the "b" of which totally
    # screws up the -lt and -gt comparisons, below.  So strip out any
    # trailing letters in the target_release and ver_release variables
    # -- if they don't match, we'll just get a "they don't match
    # somehow" kind of message (because I'm not going to code up a
    # complex/clever alphanumeric lower/higher comparison thingy).
    # Sigh.
    ver_release=`echo $ver_release | sed 's/[a-z]//g'`
    target_release=`echo $target_release | sed 's/[a-z]//g'`

    result=same
    if test "$ver" != "$target"; then 
        if test "$ver_major" -lt "$target_major"; then
            result=low
        elif test "$ver_major" = "$target_major" -a "$ver_minor" -lt "$target_minor"; then
            result=low
        elif test "$ver_major" = "$target_major" -a "$ver_minor" = "$target_minor" -a "$ver_release" -lt "$target_release"; then
            result=low
        elif test "$ver_major" -gt "$target_major"; then
            result=high
        elif test "$ver_major" = "$target_major" -a "$ver_minor" -gt "$target_minor"; then
            result=high
        elif test "$ver_major" = "$target_major" -a "$ver_minor" = "$target_minor" -a "$ver_release" -gt "$target_release"; then
            result=high
        else
            result=unknown
        fi
    fi

    if test "$result" = "low"; then
        cat <<EOF
----------------------------------------------------------------------
ERROR: Program "$prog" does not have a high enough version:
       Found: $ver
       Expected: $target

Expected versions:
m4: $M4_TARGET_VERSION
Automake: $AM_TARGET_VERSION
Autoconf: $AC_TARGET_VERSION
Libtool:  $LT_TARGET_VERSION

Either change this script to match the found version, or install
the correct version of the tools.
----------------------------------------------------------------------
EOF
        exit 1

    elif test "$result" = "high"; then
        if test "$highok" = "0"; then
            cat <<EOF
----------------------------------------------------------------------
ERROR: Program "$prog" has a higher version than expected:
       Found: $ver
       Expected: $target

Expected versions:
m4: $M4_TARGET_VERSION
Automake: $AM_TARGET_VERSION
Autoconf: $AC_TARGET_VERSION
Libtool:  $LT_TARGET_VERSION

Either change this script to match the found version, or install
the correct version of the tools.
----------------------------------------------------------------------
EOF
            exit 1
        else
            cat <<EOF
----------------------------------------------------------------------
WARNING: Program "$prog" has a higher version than expected:
         Found: $ver
         Expected: $target

Expected versions:
m4: $M4_TARGET_VERSION
Automake: $AM_TARGET_VERSION
Autoconf: $AC_TARGET_VERSION
Libtool:  $LT_TARGET_VERSION

This is *usually* ok, but this script is going to sleep for 5 seconds
to give you the chance to quit before doing anything.
----------------------------------------------------------------------
EOF
            sleep 5
        fi
        
    elif test "$result" = "unknown"; then
        cat <<EOF
----------------------------------------------------------------------
ERROR: Program "$prog" does not have the correct version:
       Found: $ver
       Expected: $target

Expected versions:
m4: $M4_TARGET_VERSION
Automake: $AM_TARGET_VERSION
Autoconf: $AC_TARGET_VERSION
Libtool:  $LT_TARGET_VERSION

Either change this script to match the found version, or install
the correct version of the tools.
----------------------------------------------------------------------
EOF
        exit 1
    fi

}

#
# Subroutine to actually make a tarball
#

make_tarball() {
    #
    # Autogen
    #
    echo "*** Running autogen.pl..."
    rm -f success
    (./autogen.pl 2>&1 && touch success) | tee auto.out
    if test ! -f success; then
        echo "Autogen failed.  Aborting"
        exit 1
    fi

    #
    # Configure
    #
    echo "*** Running configure..."
    rm -f success
    echo "${withorte}"
    (./configure --enable-dist "${withorte}" 2>&1 && touch success) | tee config.out
    if test ! -f success; then
        echo "Configure failed.  Aborting"
        exit 1
    fi

    #
    # make tarball
    #
    echo "*** Running make $dist_target..."
    save_LD=$LD_LIBRARY_PATH
    LD_LIBRARY_PATH=
    rm -f success
    (make $dist_target 2>&1 && touch success) | tee dist.out
    if test ! -f success; then
        echo "Make $dist_target failed.  Aborting"
        exit 1
    fi
    rm -f success
    LD_LIBRARY_PATH=$save_LD

    #
    # move
    #
    echo "*** Moving tarballs..."
    mv openrcm-* ..

    echo "*** All done"
}

#########################################################################
# main
#########################################################################

#
# Ensure that we were given the ORTE install directory
#
#if test "$?" < 1 ; then
#    echo "${0}: requires argument giving ORTE install directory"
#    exit 1
#fi

echo "*** Checking GNU tools versions..."
check_gnu_version m4 $M4_TARGET_VERSION
check_gnu_version automake $AM_TARGET_VERSION
check_gnu_version autoconf $AC_TARGET_VERSION
check_gnu_version libtool $LT_TARGET_VERSION

#
# Verify that we're in a top Open MPI dir
#
echo "*** Checking to ensure in top-level OpenRCM directory..."
if test -f VERSION -a -f configure.ac -a -f config/openrcm_get_version.sh ; then
    happy=1
else
    echo "Do not appear to be in an OpenRCM top directory.  Abort!"
    exit 1
fi

#
# Do svn up and all that
#
echo "*** Removing old VERSION file..."
rm -f VERSION

if test -d .svn; then
    echo "*** Running svn up..."
    svn up
    if test ! "$?" = "0"; then
        echo "SVN update failed.  Aborting"
        exit 1
    fi
elif test -d .hg; then
    echo "*** Running hg up..."
    hg revert VERSION
    hg up
    if test ! "$?" = "0"; then
        echo "HG update failed.  Aborting"
        exit 1
    fi
fi

#
# Ditch "svn/hg" from all version numbers
#
echo "*** Removing svn version numbers..."
svn_r="r`svnversion .`"
version_files=VERSION
release_date=`date '+%b %d, %Y'`
for file in $version_files; do
    echo " - $file"
    sed -e 's/^want_svn=.*/want_svn=0/' \
        -e 's/^svn_r=.*/'svn_r=$svn_r/ \
        -e "s/^date=.*/date=\"$release_date\"/" \
        $file > $file.new
    cp -f $file.new $file
    rm $file.new
done

#
# Make 2 tarballs:
#
# - one with the greek
# - one without the greek
#
# unless the user specifically said --greekonly, then only make the
# greek tarball.  Making both tarballs at once allows us to guarantee
# to have two tarballs -- one greek and one not -- that have exactly
# the same SVN r number (as opposed to, for example, running this
# script to make a greek tarball, then running it again to make a
# non-greek tarball -- there is a race condition that someone could
# commit in the meantime and change the SVN r number in the 2nd
# tarball)
#

# First, make greek tarball

echo "*** Making greek tarball"
make_tarball

# Now if ! --greekonly, make the non-greek tarball

if test "$greekonly" = "0"; then
    echo "*** REMOVING ALL GREEK FROM VERSION NUMBERS!!"
    for file in $version_files; do
        echo " - $file"
        sed -e 's/^greek=.*/greek=/' $file > $file.new
        cp -f $file.new $file
        rm $file.new
    done
    echo "Making non-greek tarball"
    make_tarball
fi

# Put the VERSION file back the way it was
svn revert VERSION
