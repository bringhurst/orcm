# -*- autoconf -*-
#
# Copyright © 2009-2010 Cisco Systems, Inc.  All rights reserved.
#

#
# Initialize autostuff
#

AC_PREREQ([2.65])
AC_LANG([C])

AC_INIT([openrcm], 
        [m4_normalize(esyscmd([config/openrcm_get_version.sh VERSION --base]))],
        [rcastain@open-mpi.org], [openrcm])
AC_CONFIG_AUX_DIR([config])
AC_CONFIG_MACRO_DIR([config])

AC_CANONICAL_SYSTEM

AM_INIT_AUTOMAKE([foreign dist-bzip2 subdir-objects no-define 1.11.1 tar-ustar])

m4_pattern_allow([m4_ifval])

# If Automake supports silent rules, enable them.
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

# Make configure depend on the VERSION file, since it's used in AC_INIT
AC_SUBST([CONFIGURE_DEPENDENCIES], ['$(top_srcdir)/VERSION'])

# Start it up
ORCM_CONFIGURE_SETUP
orcm_show_title "Configuring ORCM"

# Get the version of openrcm that we are installing
AC_MSG_CHECKING([for openrcm version])
OPENRCM_VERSION="`$srcdir/config/openrcm_get_version.sh $srcdir/VERSION`"
OPENRCM_MAJOR_VERSION="`$srcdir/config/openrcm_get_version.sh $srcdir/VERSION --major`"
OPENRCM_MINOR_VERSION="`$srcdir/config/openrcm_get_version.sh $srcdir/VERSION --minor`"
OPENRCM_RELEASE_VERSION="`$srcdir/config/openrcm_get_version.sh $srcdir/VERSION --release`"
OPENRCM_SVN_R="`$srcdir/config/openrcm_get_version.sh $srcdir/VERSION --svn`"
AC_SUBST(OPENRCM_VERSION)
AC_SUBST(OPENRCM_SVN_R)
AC_DEFINE_UNQUOTED([OPENRCM_MAJOR_VERSION], [$OPENRCM_MAJOR_VERSION],
    [Major version of openrcm])
AC_DEFINE_UNQUOTED([OPENRCM_MINOR_VERSION], [$OPENRCM_MINOR_VERSION],
    [Minor version of openrcm])
AC_DEFINE_UNQUOTED([OPENRCM_RELEASE_VERSION], [$OPENRCM_RELEASE_VERSION],
    [Release version of openrcm])
AC_MSG_RESULT([$OPENRCM_VERSION])

#
# Setup configure options
#
ORCM_CONFIGURE_OPTIONS

# Override/fixup the version numbers set by AC_INIT, since on
# developer builds, there's no good way to know what the version is
# before running configure :(.  We only use the base version number
# (ie, no svn r numbers) for the version set in AC_INIT.  This will
# always match reality because we add the VERSION file (the only way
# to change the major.minor.release{greek}) into the configure
# dependencies.

PACKAGE_VERSION="$OPENRCM_VERSION"
PACKAGE_STRING="${PACKAGE_NAME} ${PACKAGE_VERSION}"
VERSION="${PACKAGE_VERSION}"

# For standalone configurations, we also include a .so version number.

. $srcdir/VERSION
AC_SUBST([libopenrcm_so_version])

# Setup the header file

AH_TOP([/* -*- c -*-
 *
 * Copyright © 2009-2010 Cisco Systems, Inc.  All rights reserved.
 * $COPYRIGHT$
 * 
 * Additional copyrights may follow
 * 
 * $HEADER$
 *
 * This is the "private" config header file for ORCM.  This file
 * should only be included by .c files in the ORCM tree.  It should
 * *not* be included by code outside of the ORCM source tree!
 *
 * This file is automatically generated by configure.  Edits will be lost
 * the next time you run configure!
 */

#ifndef OPENRCM_CONFIG_H
#define OPENRCM_CONFIG_H
])
AH_BOTTOM([
#include "openrcm_config_bottom.h"

#endif /* OPENRCM_CONFIG_H */
])

#
# C compiler.  Use ortecc by default if $CC wasn't otherwise specified
# (and if we're not --enable-dist).
#

CFLAGS_save="$CFLAGS"
AS_IF([test "x$CC" = "x" -a "$ORCM_WANT_DIST" != "yes"], [CC=ortecc])
AC_PROG_CC
CFLAGS="$CFLAGS_save"

AC_CHECK_HEADERS([qinfo.h])

dnl CXXFLAGS_save="$CXXFLAGS"
dnl AS_IF([test "x$CXX" = "x" -a "$ORCM_WANT_DIST" != "yes"], [CXX=ortec++])
dnl AC_PROG_CXX
dnl CXXFLAGS="$CXXFLAGS_save"

#
# Add appropriate CPPFLAGS to find various include files
#

AC_MSG_CHECKING([for final CPPFLAGS])
CPPFLAGS='-I$(top_srcdir) -I$(top_srcdir)/src -I$(top_srcdir)/src/include'" $ORTE_CPPFLAGS $CPPFLAGS"
AC_MSG_RESULT([$CPPFLAGS])

AC_MSG_CHECKING([for final LDFLAGS])
LDFLAGS="$ORTE_LDFLAGS $LDFLAGS"
AC_MSG_RESULT([$LDFLAGS])

#
# Need to find the OMPI header files and libraries
#

AS_IF([test "$ORCM_WANT_DIST" != "yes"],
      [AC_CHECK_HEADERS([opal/mca/mca.h], [], 
                        [AC_MSG_ERROR([*** Cannot find opal/mca/mca.h])])
       AC_CHECK_LIB([open-pal], [opal_init_util], [],
                    [AC_MSG_ERROR([*** Cannot find/link to libopen-pal])])
       AC_CHECK_LIB([open-rte], [orte_init], [],
                    [AC_MSG_ERROR([*** Cannot find/link to libopen-rte])],
                    [-lopen-pal])
       # RHC: need to find a better public symbol than orte_rmcast
       AC_CHECK_FUNC([orte_rmcast], [],
                     [AC_MSG_ERROR([*** ORTE does not appear to have been built with multicast support.  Cannot continue.])])
])

# Expand/eval $includedir and $libdir for AC_SUBST'ing.

if test "$prefix" = "NONE"; then
   # If --prefix wasn't specified on the configure line, then $prefix
   # will be NONE.  So just default to the GNU default: /usr/local.
   prefix=/usr/local
fi
if test "$exec_prefix" = "NONE"; then
   exec_prefix=$prefix
fi

foo="expanded_incdir=$includedir"
eval $foo
OPENRCM_WRAPPER_INCLUDEDIR="$expanded_incdir"
AC_SUBST(OPENRCM_WRAPPER_INCLUDEDIR)

foo="expanded_libdir=$libdir"
eval $foo

OPENRCM_WRAPPER_LIBDIR="$expanded_libdir"
AC_SUBST(OPENRCM_WRAPPER_LIBDIR)

foo="expanded_datadir=$datadir"
eval $foo
OPENRCM_DATADIR="$expanded_datadir"
AC_SUBST(OPENRCM_DATADIR)

#
# Setup wrapper compiler flags.  Just add the ORTE -I and -L dirs.
#

OPENRCM_WRAPPER_EXTRA_INCLUDES=
OPENRCM_WRAPPER_EXTRA_CPPFLAGS="$ORTE_CPPFLAGS -I$expanded_incdir/openrcm/include -I$expanded_incdir/openrcm"
OPENRCM_WRAPPER_EXTRA_CFLAGS=
dnl OPENRCM_WRAPPER_EXTRA_CXXFLAGS=
OPENRCM_WRAPPER_EXTRA_LDFLAGS=$ORTE_LDFLAGS
OPENRCM_WRAPPER_EXTRA_LIBS=
AC_SUBST(OPENRCM_WRAPPER_EXTRA_INCLUDES)
AC_SUBST(OPENRCM_WRAPPER_EXTRA_CPPFLAGS)
AC_SUBST(OPENRCM_WRAPPER_EXTRA_CFLAGS)
dnl AC_SUBST(OPENRCM_WRAPPER_EXTRA_CXXFLAGS)
AC_SUBST(OPENRCM_WRAPPER_EXTRA_LDFLAGS)
AC_SUBST(OPENRCM_WRAPPER_EXTRA_LIBS)

##################################
# Visibility
##################################

# Check the visibility declspec at the end to avoid problem with
# the previous tests that are not necessarily prepared for
# the visibility feature.
orcm_show_title "Symbol visibility feature"

ORCM_CHECK_VISIBILITY

#
# Libtool: part 1
#

AM_ENABLE_SHARED
AM_DISABLE_STATIC
# For the moment, we don't support static builds.  ORTE components
# *must* be built as DSOs, and we can't build *some* components as
# DSOs (i.e., the ORTE ones) and *some* as static (i.e., the ORCM
# ones).  The only way to do that would be to have a separate
# configure script down in the orte/ directory.  I don't have the time
# to do that at the moment, and Ralph tells me that it's not a
# priority.  So for the moment, *only* allow --enable-shared.
AS_IF([test "$enable_static" = "yes" -o "$enable_shared" = "no"],
      [AC_MSG_WARN([This configure script does not currently])
       AC_MSG_WARN([support --enable-static or --disable-shared.])
       AC_MSG_ERROR([Cannot continue.])])

#
# Setup the MCA components
#

orcm_show_title "Configuring components"
m4_include([config/autogen_found_items.m4])
ORCM_MCA

# Must use eval to get the final value
orcm_show_title "Configuring PACKAGE directories"
str='ORCM_LIBDIR='$libdir
eval $str
AC_DEFINE_UNQUOTED(ORCM_PKGLIBDIR, ["$ORCM_LIBDIR/openrcm"],
                   [Where ORCM's components live])
AC_DEFINE_UNQUOTED(ORCM_PKGHELPDIR, ["$prefix/share/openrcm"],
                   [Where ORCM's help files reside])
AC_SUBST([testdir], ["$prefix/test"])
ORCM_PKGLIBDIR_MSG=$ORCM_LIBDIR/openrcm
ORCM_PKGHELP_MSG=$prefix/share/openrcm
AC_MSG_RESULT([$ORCM_PKGLIBDIR_MSG...$ORCM_PKGHELP_MSG])

#
# Libtool: part 2
#

orcm_show_title "Configuring Libtool"
AC_PROG_LIBTOOL

#
# Output files
#

# Private / ORCM-only header file (i.e., only included in ORCM .c files)
AC_CONFIG_HEADERS([src/include/openrcm_config_private.h])
# Public header that anyone can include
AC_CONFIG_HEADERS([src/include/openrcm.h])

AC_CONFIG_FILES([Makefile
                 src/Makefile

		 src/orte/Makefile

                 src/tools/Makefile
		 src/tools/orcm-info/Makefile
		 src/tools/orcm-start/Makefile
		 src/tools/orcm-stop/Makefile
                 src/tools/orcmd/Makefile
		 src/tools/wrappers/Makefile
		 src/tools/wrappers/orcmcc-wrapper-data.txt
		 src/tools/wrappers/orcm_wrapper_script
		 src/tools/orcm-sched/Makefile
                 src/tools/orcmrun/Makefile
                 src/tools/orcm-ps/Makefile

		 test/pnp/Makefile
		 test/spinners/Makefile
])

# 		 src/tools/orcm-sched/Makefile
#		 src/tools/orcm-ps/Makefile
#                 src/tools/orcmrun/Makefile

#
# Party on
#

AC_OUTPUT
