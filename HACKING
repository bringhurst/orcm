Copyright (c) 2009-2011 Cisco Systems, Inc.  All rights reserved.
$COPYRIGHT$

Additional copyrights may follow

$HEADER$

Overview
========

This file is here for those who are building/exploring OpenRCM in its
source code form, most likely through a developer's tree (i.e., a
Subversion checkout).

Building the Required Open MPI Support
======================================

OpenRCM requires that the ORTE and OPAL layers of Open MPI be
installed prior to building OpenRCM.  Because OpenRCM relies on
features in those layers that are not yet included in any available
official release, you will need to checkout and build a developer's
copy of Open MPI, and ensure that the relevant features are "enabled"
during the configure.

To build the required support, follow these steps:

1. Obtain a copy of the OMPI developer's trunk:

    shell$ svn co http://svn.open-mpi.org/svn/ompi/trunk ompi-trunk
    shell$ cd ompi-trunk

2. Build only the ORTE and OPAL layers - you do not need the OMPI
   layer.  Note that you are welcome to build/install the entire Open
   MPI package if you like (including the OMPI layer).  Omitting the
   OMPI layer only makes the build go faster; OpenRCM itself does not
   require the OMPI layer.

    shell$ ./autogen.pl -no-ompi

3. Configure the OMPI software for use with OpenRCM. The following configure
   options are the minimum required:

    shell$ ./configure --prefix=whatever --enable-multicast --with-devel-headers \
              --enable-opal-multi-threads

   If you plan to run ORCM across multiple nodes and want to detect/respond to
   node failures, then add:

   --enable-heartbeat --enable-sensors

   If you want to minimize your memory footprint, you can "not-build" a number
   of standard ORTE modules. See one of the platform files (such as
   contrib/platform/cisco/linux) for an example configuration. Note that you
   can always use a platform file to build OMPI for ORCM. Platform files
   replace all other configure options - for example:

     shell$ ./configure --prefix=whatever --platform=contrib/platform/cisco/linux

   For a full list of configure options, including directions on how to add
   confd support, use:

     shell$ ./configure --help

4. Build and install the OMPI software:

    shell$ make clean all install > /dev/null

You are now ready to build and install OpenRCM


Building OpenRCM
================

Once the Open MPI support has been installed, you can proceed with building
OpenRCM:

1. Obtain a copy of the OpenRCM developer's trunk:

    shell$ svn co http://svn.open-mpi.org/svn/orcm/trunk orcm-trunk
    shell$ cd orcm-trunk

2. The build requires that you start with a very simple autogen
   script:

    shell$ ./autogen.pl

3. Configure the OpenRCM software. Note that you must tell the
   configure where to find the Open MPI build you installed!

    shell$ ./configure --prefix=whatever --with-orte=<ompi-prefix-given> \
              --with-orte-plugin-dir=<ompi-prefix-given>/lib/open-rte

4. Build and install the ORCM software:

    shell$ make clean all install > /dev/null


Debugging vs. Optimized Builds
==============================

OpenRCM will work with both optimized and debug builds of Open MPI.
If you are building Open MPI from a Subversion checkout, the default
build includes a lot of debugging features.  This happens
automatically when when configure detects the hidden ".svn" Subversion
meta directory (that is present in all Subversion checkouts) in your
source tree, and therefore activates a number of developer-only
debugging features in the Open MPI code base.  The same is true if you
have a Mercurial checkout (with the hidden .hg meta directory).

By definition, debugging builds will perform [much] slower than
optimized builds of Open MPI.  You should *NOT* conduct timing tests
or try to run production performance numbers with debugging builds.

If you wish to build an optimized version of Open MPI from a
developer's checkout for use with OpenRCM, then you need to slightly
modify the ./configure line by adding --disable-debug to your other
options.


Other Dependencies
==================

Open MPI depends upon several common software packages, including m4,
libtool, automake, and autoconf. You will need specific versions (or
above) of these tools in order to build Open MPI from a developer's
checkout.  See the HACKING file in the Open MPI code tree for details:

    https://svn.open-mpi.org/trac/ompi/browser/trunk/HACKING

OpenRCM will build correctly with those minimum requirements - nothing
additional is needed.


Compiling OpenRCM Applications
==========================

ORCM applications should be compiled using the OpenRCM "wrapper"
compiler. Currently, only C programs are supported:

    shell$ orcmcc your-code.c

The wrapper compiler simply adds various command line flags (such as
libraries) and invoke a back-end compiler; they are not compilers in
themselves.
