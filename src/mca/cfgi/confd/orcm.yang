/* Hey Emacs use -*- mode: C -*- */
/*
 * Copyright (c) 2010-2011 Cisco Systems, Inc. All rights reserved. 
 */

module orcm {
    namespace "http://www.cisco.com/ns/orcm";
    prefix "orcm";

    // we import these namespaces to get access to their predefined types
    //   (like ip addresses, prefixes, etc., but also tailf types that provide
    //   hooks for invoking our callbacks)
    import ietf-yang-types {
        prefix yang;
    }
    import ietf-inet-types {
        prefix inet;
    }
    import tailf-common {
        prefix tailf;
    }

    typedef app-version_t {
        /// replace with a pattern when we figure out how it's going to look
	type string;
    }

    grouping execGroup {
        // An exec is synonymous to an ORCM app within a job
        leaf replicas {
            // Number of replicas to launch
            description "Number of replicas to launch";
            type int32;
        }
        leaf leader-exclude {
            // Used to indicate that this exectuable shouldn't be a candidate for the leader role.
            //   The anticipated use is for a newer version of a program that we want to bake
            //   and verify for proper functionality before letting it hold the reins.
            description "Exclude from leader consideration";
            type empty;
        }
        leaf-list nodes {
            description "Comma-separated list of specific nodes to run on";
            type string;
        }
        leaf uid {
            description "Running as (user)";
            type int32;
        }
        leaf gid {
            description "Running as (groups)";
            type int32;
        }
        leaf-list argv {
            description "Command-line arguments passed";
            type string;
        }
        leaf-list env {
            // Just a string of environmental variables. May eventually be a key-value pair.
            description "Environmental variables for this executable";
            type string;
        }
        leaf working-dir {
            description "Working directory";
            type string;
        }
        leaf max-restarts {
            description "Maximum number of restarts";
            type int32;
        }
    }

    container orcmConfig {
        // This will be where we store configuration data about the cluster-manager. The top
        //   container stores data about all installed applications -- this will be populated
        //   by the installation manager.  Beneath each installed application, we store
        //   data about default runtime settings, as well as configuration for specific
        //   running instances of the application.
        //
        // Ideally, the running instances configuration would be in a separate container of the
        //   data model (not under the "install" container), but we can't do it that way b/c
        //   of a current tail-f limitation for referencing nested lists.
	description "Cluster Manager configuration";
        tailf:alt-name "orcm-config";
        tailf:cli-add-mode;
	container install {
            tailf:cli-add-mode;
	    list app {
		description "Per-application installation data";
		key "name";
		leaf name {
                    // This is a generic application name that the outside world would see.
                    //   Think "bgp", "isis", "snmpd", etc.
		    description "Application name";
		    type string;
		}
		leaf enable-recovery {
	    	    description "Enable recovery of failed processes";
	    	    type int32;
	        }
		list exec {
                    // Each generic application may comprise several programs (app-groups) that
                    //   work together -- the best example right now is BGP, which has a shim
                    //   layer and a client layer.
		    description "Program executables in this application";
///                 tailf:hidden full;
		    key exec-name;
		    leaf exec-name {
                        // The name is assumed to be unique. This probably involves embedding version
                        //   information in the name (bgp_shim-1.0.0)
			description "Name of this executable";
			type string;
		    }
		    leaf path {
                        // Full path to the executable: e.g., /usr/bin/bgp_shim-1.0.0
			description "Path to this binary";
			type string;
		    }
		    leaf version {
                        // Even if the version information is embedded in the name, we don't
                        //   necessarily want to extract it every time we need it. Plus, this
                        //   field may be used to indicate box-wide API version
			description "Version of this binary";
			type app-version_t;
		    }

                    container default {
                        // Default runtime settings for the application, on a per-exec-group basis
                        description "Default application settings";
                        tailf:cli-add-mode;
///                     tailf:hidden full;
                        // Use the already-defined fields form the exec-group grouping
                        uses execGroup;
                    }
                }
            }
        }

        container run {
          tailf:cli-add-mode;
          list app-instance {
            // Define a running instance of the application. The instance name can be
            //   whatever the user desires, e.g., "Production BGP" or "Test BGP".
            description "Define a running instance of this application";
            key instance-name;
            leaf instance-name {
                description "Name of the instance, e.g., \"Production BGP\"";
                type string;
            }
            leaf app-name {
		description "Application name";
		type leafref {
                  path "/orcmConfig/install/app/name";
                }
            }
	    leaf enable-recovery {
	        description "Enable recovery of failed processes";
		type int32;
	    }
            list exec {
                key exec-name;
                // Use the already-defined fields from the execGroup grouping. Since
                //   this defines a particular instance of the running application, we
                //   use the config-set as another key. This allows the user to define
                //   multiple configuration blocks for a single application and run them
                //   concurrently.
                leaf exec-name {
                    // The name of the executable
                    //type leafref {
                        // This points back to the installed binaries to make sure you can't
                        //   configure a binary that hasn't already been installed
                    //    path "/orcm:orcm-config/install/app[name=current()/../../name]/bin/name";
                    //}
                    type string;
                    description "Executable name";
                }
                leaf config-set {
                    // this is a selector into the application's config base
                    description "Configuration set for this application";
                    type string;
                }
                uses execGroup;
            }
          }
        }
    }
    
    container orcmOper {
        config false;
        tailf:alt-name "orcm";
        tailf:callpoint orcm_oper;
        description "ORCM operational data";
        list job {
            description "Job information";
            key job-id;
            leaf job-id {
                description "Job ID";
                type uint32;
            }
            leaf job-name {
                description "Plain name of the job";
                type string;
            }
            list app-context {
                key app-context-id;
                leaf app-context-id {
                    description "ORCM app ID";
                    type uint32;
                }
                leaf path {
                    description "Absolute pathname to executable";
                    type string;
                }
                leaf max-restarts {
                    description "Max # of restarts";
                    type int32;
                }
                list replica {
                    description "Per replica (process) information";
                    key vpid;
		    leaf vpid {
		        description "Virtual process ID for launched replica";
			type uint32;
		    }
                    leaf pid {
                        description "Process ID for launched replica";
                        type uint32;
                    }
                    leaf node {
                        description "Node where this replica is running";
                        type string;
                    }
		    leaf num_restarts {
		        description "Number of times this process has been restarted";
			type int32;
                    }
                }
            }
        }
        list node {
            key node-id;
	    leaf node-id {
	        description "Index of node in array";
		type uint32;
	    }
            leaf node-name {
                description "Node name";
                type string;
            }
            leaf state {
                description "Node state";
                type string;
            }
            container sensor-data {
                leaf temperature {
                    description "Node temperature";
                    type int8;
                }
            }
            leaf num-procs {
                description "Number of procs running on this node";
                type int32;
            }
        }
	list installed-software {
	    key index;
	    leaf index {
	        description "Index of application in array";
		type uint32;
	    }
            leaf name {
                description "Plain name of the application";
                type string;
            }
            leaf enable-recovery {
                description "Enable recovery of failed processes";
                type string;
            }
            list installed-app {
                key app-id;
                leaf app-id {
                    description "ORCM app ID";
                    type uint32;
                }
                leaf path {
                    description "Name of executable";
                    type string;
                }
                leaf version {
                    description "Version of this binary";
                    type app-version_t;
                }
                leaf max-restarts {
                    description "Max # of restarts";
                    type int32;
                }
                leaf replicas {
                    description "Default num replicas";
                    type int32;
                }
                leaf uid {
                    description "User id to be used";
                    type int32;
                }
                leaf gid {
                     description "Group id to be used";
                     type int32;
                }
            }
        }
    }
}
